generator client{
  provider= "prisma-client-js"
}
datasource db{
  provider="postgresql"
  url=env("DATABASE_URL")
}

enum Plan{
  FREE
  PRO
  AGENCY
}
enum Platform{
  TWITTER
  LINKEDIN
  INSTAGRAM
  FACEBOOK
  TIKTOK
}
enum ContentStatus{
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}
enum UsageType{
  CONTENT_GENERATION
  CONTENT_PUBLISHING
  AI_TOKENS
}

model Account{
  id        String @id @default(cuid())
  userId    String
  type      String
  provider  String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User @relation(fields: [userId],references: [id], onDelete: Cascade)
  @@unique([provider,providerAccountId])

}
model Session{
  id           String @id @default(cuid())
  sessionToken String @unique
  userId       String
  expires      DateTime
  user         User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User{
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  plan          Plan       @default(FREE)
  credits       Int        @default(5)
  stripeId      String?    @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  accounts       Account[]
  sessions       Session[]
  content        Content[]
  campaigns      Campaign[]
  socialAccounts SocialAccount[]
  usage          Usage[]
}

model Content{
  id          String      @id @default(cuid())
  title       String
  content     String      @db.Text
  platform    Platform
  status      ContentStatus @default(DRAFT)
  scheduledAt DateTime?
  publishedAt DateTime?
  userId      String
  campaignId  String?
  metadata    Json?       
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign  Campaign? @relation(fields: [campaignId], references: [id])
  analytics Analytics[]
}

model Campaign{
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     Content[]
}

model SocialAccount {
  id           String   @id @default(cuid())
  platform     Platform
  platformId   String
  username     String
  accessToken  String   @db.Text
  refreshToken String?  @db.Text
  expiresAt    DateTime?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([platform, platformId])
}

model Analytics {
  id          String   @id @default(cuid())
  contentId   String
  platform    Platform
  impressions Int      @default(0)
  likes       Int      @default(0)
  shares      Int      @default(0)
  comments    Int      @default(0)
  clicks      Int      @default(0)
  reach       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model Usage {
  id        String    @id @default(cuid())
  userId    String
  action    UsageType
  count     Int       @default(1)
  date      DateTime  @default(now())
  metadata  Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
}